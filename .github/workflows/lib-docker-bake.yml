#
# lib-docker-bake - Build and deploy container images
#
# This is a callable workflow that uses `docker buildx bake` to build a
# selected set of container images and then optionally deploys them.
#

name: "lib: build/deploy container images"

on:
  workflow_call:
    inputs:
      deploy:
        default: false
        description: "Deploy built images to their repositories"
        required: false
        type: boolean
      ghcruser:
        default: ""
        description: "Username to use for authentication to ghcr.io (empty to skip)"
        required: false
        type: string
      source:
        default: "."
        description: "Path to the source directory relative to the workspace"
        required: false
        type: string
      target:
        default: "default"
        description: "Buildx target to work on"
        required: true
        type: string
    secrets:
      ghcrpass:
        description: "Password to use for authentication to ghcr.io"
        required: false

defaults:
  run:
    shell: "bash"

jobs:

  #
  # Configure Jobs
  #
  # This job prepares parameters for further processing. Amongst other things,
  # it lists all targets and provides this output as JSON array to other
  # jobs. This allows us to dynamically react to additions to the image list
  # and create new jobs for each image.
  #
  # Note that we have to split image builds across jobs since the individual
  # CI runners do not have enough disk capacity to build all images.
  #
  config:
    name: "Job Configuration"

    runs-on: ubuntu-latest

    outputs:
      images_flat: ${{ steps.parameters.outputs.images_flat }}
      images_grouped: ${{ steps.parameters.outputs.images_grouped }}
      now: ${{ steps.parameters.outputs.now }}

    steps:
    - name: "Clone Repository"
      uses: actions/checkout@v4

    - name: "Determine Build Parameters"
      env:
        CTX_INPUTS_TARGET: ${{ inputs.target }}
      id: parameters
      working-directory: ${{ inputs.source }}
      run: |
        IMG_IMAGES_FLAT=$(
          docker buildx bake --print "${CTX_INPUTS_TARGET}" \
            | jq -ce '[
              (
                .target
                  | with_entries(select(.value.platforms | any(. == "linux/amd64")))
                  | keys[] | { platform: "linux/amd64", target: ., runner: "ubuntu-latest"}
              ),
              (
                .target
                  | with_entries(select(.value.platforms | any(. == "linux/arm64")))
                  | keys[] | { platform: "linux/arm64", target: ., runner: "ubuntu-24.04-arm" }
              )
            ]'
        )
        IMG_IMAGES_GROUPED=$(
          jq -ce '[
            group_by(.target)[] | { target: .[0].target, platforms: [.[].platform] }
          ]' <<<"${IMG_IMAGES_FLAT}"
        )
        IMG_NOW=$(date -u '+%Y%m%d%H%M')

        echo "images_flat=${IMG_IMAGES_FLAT}" >>$GITHUB_OUTPUT
        echo "images_grouped=${IMG_IMAGES_GROUPED}" >>$GITHUB_OUTPUT
        echo "now=${IMG_NOW}" >>$GITHUB_OUTPUT

    - name: "Print Parameters"
      env:
        CTX_STEPS_PARAMETERS_OUTPUTS_IMAGES_FLAT: ${{ steps.parameters.outputs.images_flat }}
        CTX_STEPS_PARAMETERS_OUTPUTS_IMAGES_GROUPED: ${{ steps.parameters.outputs.images_grouped }}
        CTX_STEPS_PARAMETERS_OUTPUTS_NOW: ${{ steps.parameters.outputs.now }}
      run: |
        echo "Images(flat):"
        echo "${CTX_STEPS_PARAMETERS_OUTPUTS_IMAGES_FLAT}" | jq .
        echo "End of Images(flat)"
        echo "Images(grouped):"
        echo "${CTX_STEPS_PARAMETERS_OUTPUTS_IMAGES_GROUPED}" | jq .
        echo "End of Images(grouped)"
        echo "Now: ${CTX_STEPS_PARAMETERS_OUTPUTS_NOW}"

  #
  # Build/Test Container Images
  #
  # This job is run for each target. It builds the container image locally and
  # then runs configured tests (if any).
  #
  build:
    name: "Container Build/Test"
    needs: config

    env:
      IMG_NOW: ${{ needs.config.outputs.now }}
    runs-on: ${{ matrix.image.runner }}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.config.outputs.images_flat) }}

    steps:
    - name: "Authenticate to GHCR"
      if: inputs.ghcruser != ''
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcruser }}
        password: ${{ secrets.ghcrpass }}

    - name: "Clone Repository"
      uses: actions/checkout@v4

    - name: "Prepare Docker Engine"
      uses: docker/setup-docker-action@v4
      with:
        daemon-config: |
          { "features": { "containerd-snapshotter": true } }

    - name: "Prepare Docker Buildx"
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: "Build Image"
      env:
        CTX_MATRIX_IMAGE_PLATFORM: ${{ matrix.image.platform }}
        CTX_MATRIX_IMAGE_TARGET: ${{ matrix.image.target }}
      working-directory: ${{ inputs.source }}
      run: |
        docker buildx bake \
          --load \
          --set "*.platform=${CTX_MATRIX_IMAGE_PLATFORM}" \
          "${CTX_MATRIX_IMAGE_TARGET}"

    - name: "Deploy Preliminary Image to GHCR"
      if: inputs.ghcruser != ''
      env:
        CTX_MATRIX_IMAGE_PLATFORM: ${{ matrix.image.platform }}
        CTX_MATRIX_IMAGE_TARGET: ${{ matrix.image.target }}
      working-directory: ${{ inputs.source }}
      run: |
        IMG_TAGS_JSON=$(
          docker buildx bake --print "${CTX_MATRIX_IMAGE_TARGET}" \
            | jq -ce '[.target[].tags[] | select(test("^ghcr.io"))]'
        )
        readarray -t IMG_TAGS < <(jq -cer '.[]' <<<"${IMG_TAGS_JSON}")

        for IMG_T in "${IMG_TAGS[@]}" ; do
          IMG_SUFFIX="${IMG_NOW}-${CTX_MATRIX_IMAGE_PLATFORM//\//_}"
          echo "Pushing as: ${IMG_T}-${IMG_SUFFIX}"
          docker tag "${IMG_T}" "${IMG_T}-${IMG_SUFFIX}"
          docker push "${IMG_T}-${IMG_SUFFIX}"
        done

  #
  # Deploy Container Images
  #
  # This job is run for each target. It combines possibly-multi-platform images
  # and deploys them to selected registries.
  #
  deploy-ghcr:
    name: "Container Deployment to GHCR"
    if: inputs.deploy && inputs.ghcruser != ''
    needs: [config, build]

    env:
      IMG_NOW: ${{ needs.config.outputs.now }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.config.outputs.images_grouped) }}

    steps:
    - name: "Authenticate to GHCR"
      if: inputs.ghcruser != ''
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcruser }}
        password: ${{ secrets.ghcrpass }}

    - name: "Clone Repository"
      uses: actions/checkout@v4

    - name: "Prepare Docker Engine"
      uses: docker/setup-docker-action@v4
      with:
        daemon-config: |
          { "features": { "containerd-snapshotter": true } }

    - name: "Prepare Docker Buildx"
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: "Combine & Deploy Images to GHCR"
      env:
        CTX_MATRIX_IMAGE_TARGET: ${{ matrix.image.target }}
        CTX_MATRIX_IMAGE_PLATFORMS: ${{ toJson(matrix.image.platforms) }}
      working-directory: ${{ inputs.source }}
      run: |
        readarray -t IMG_PLATFORMS < <(jq -cer '.[]' <<<"${CTX_MATRIX_IMAGE_PLATFORMS}")

        IMG_TAGS_JSON=$(
          docker buildx bake --print "${CTX_MATRIX_IMAGE_TARGET}" \
            | jq -ce '[.target[].tags[] | select(test("^ghcr.io"))]'
        )
        readarray -t IMG_TAGS < <(jq -cer '.[]' <<<"${IMG_TAGS_JSON}")

        for IMG_T in "${IMG_TAGS[@]}" ; do
          IMG_LIST=()
          for IMG_P in "${IMG_PLATFORMS[@]}" ; do
            IMG_SUFFIX="${IMG_NOW}-${IMG_P//\//_}"
            echo "Pulling as: ${IMG_T}-${IMG_SUFFIX}"
            docker pull "${IMG_T}-${IMG_SUFFIX}"
            IMG_LIST+=("${IMG_T}-${IMG_SUFFIX}")
          done
          docker buildx imagetools create -t "${IMG_T}" "${IMG_LIST[@]}"
          docker buildx imagetools create -t "${IMG_T}-${IMG_NOW}" "${IMG_LIST[@]}"
        done
